Exercícios
A
1. #include <iostream>
using namespace std;

int numero;

void multiploQuatro(){
    if (numero%4==0){
        cout << "o numero selecionado e multiplo de 4." << endl;
    }
    else {
        cout << "o numero selecionado nao e multiplo de 4." << endl;
    }
}

int main(){
    cin >> numero;
    multiploQuatro();
}

2. #include <iostream>
using namespace std;

int numero;

void parImpar(){
    if (numero%2==0){
        cout << "o numero e par" << endl;
    }
    else {
        cout << "o numero e impar" << endl;
    }
}

int main(){
    cin >> numero;
    parImpar();
}

3. #include <iostream>
using namespace std;

void somaIntervalo(){
    int num1, num2;

    cout << "digite o primeiro numero inteiro positivo: ";
    cin >> num1;
    cout << "digite o segundo numero inteiro positivo: ";
    cin >> num2;

    if (num1 > num2){
        int temp = num1;
        num1 = num2;
        num2 = temp;
    }

    int soma = 0;
    cout << "o intervalo e: ";
    for (int i = num1; i <= num2; i++){
        soma += i;
        cout << i;
        if (i != num2){
            cout << " + ";
        }
    }

    cout << endl;
    cout << "resultado: " << soma << endl;
}

int main(){
    somaIntervalo();

    return 0;
}

4. #include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

float raio, esfera, pi= M_PI;

void volume(){
    esfera = 4 * pi * (raio*raio*raio)/3;
    cout << "volume da esfera: " << fixed << setprecision(2)<< esfera << endl;
}

int main (){
    cin >> raio;
    volume();
}

5. #include <iostream>
using namespace std;

int numero;

void fatorial(){
    for(int i=numero-1; i>1; i--){
        numero=numero*i;
    }
    cout << "fatorial: " << numero << endl;
}

int main(){
    cin >> numero;
    fatorial();
}

6. #include <iostream> 
using namespace std;

int base, expoente, resultado=1;

void potencia(){
    while(expoente>0){
        resultado*=base;
        expoente--;
    }
    cout << resultado << endl;
}

int main(){
    cin >> base;
    cin >> expoente;
    potencia();
}

B.
1. #include <iostream>
using namespace std;

int multiploQuatro(int numero){
    return numero%4;
}

int main(){
    int n;
    cin >> n;

    if (multiploQuatro(n)==0){
        cout << "o numero selecionado e multiplo de 4." << endl;
    }
    else {
        cout << "o numero selecionado nao e multiplo de 4." << endl;
    }
}

2. #include <iostream>
using namespace std;

int parImpar(int numero){
    return numero%2;
}

int main(){
    int n;
    cin >> n;
    if (parImpar(n)==0){
        cout << "o numero e par" << endl;
    }
    else {
        cout << "o numero e impar" << endl;
    }
}

3. #include <iostream>
using namespace std;

int somaIntervalo(int num1, int num2){
    if (num1 > num2){
        int temp = num1;
        num1 = num2;
        num2 = temp;
    }

    int soma = 0;
    cout << "o intervalo e: ";
    for (int i = num1; i <= num2; i++){
        soma += i;
        cout << i;
        if (i != num2){
            cout << " + ";
        }
    }

    cout << endl;
    return soma;
}

int main(){
    int num1, num2;
    
    cout << "digite o primeiro numero inteiro positivo: ";
    cin >> num1;
    cout << "digite o segundo numero inteiro positivo: ";
    cin >> num2;
    
    int resultado = somaIntervalo(num1, num2);

    cout << "resultado: " << resultado << endl;
    
    return 0;
}

4. #include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

float esfera(float raio);

int main(){
    float raio;
    cout << "insira o raio: ";
    cin >> raio;
    cout << "o volume da esfera e: "
         << fixed << setprecision(2)
         << esfera(raio) << endl;
}

float esfera(float raio){
    float pi= M_PI,esfera;
    esfera = pi * 4 * (raio*raio*raio)/3;
    return esfera;
}

5. #include <iostream>
using namespace std;

int fatorial(int numero){
    int resultado = numero;
    for (int i = numero - 1; i > 1; i--){
        resultado *= i;
    }
    return resultado;
}

int main(){
    int numero;
    cin >> numero;
    
    int resultado = fatorial(numero);
    cout << "Fatorial: " << resultado << endl;
    
    return 0;
}

6. #include <iostream>
using namespace std;

int potencia(int base, int expoente){
    int resultado = 1;
    while (expoente > 0){
        resultado *= base;
        expoente--;
    }
    return resultado;
}

int main(){
    int base, expoente;
    cin >> base;
    cin >> expoente;
    
    int resultado = potencia(base, expoente);
    cout << resultado << endl;
    
    return 0;
}

C.
1. Funções são blocos de código que realizam tarefas específicas em um programa. Elas são usadas para agrupar um conjunto de instruções em um único local e podem ser chamadas de outros lugares do programa sempre que necessário. As funções são cruciais na programação, pois promovem a modularidade e a reutilização de código.

2. Argumentos (ou parâmetros) são valores que você fornece a uma função quando a chama. Eles servem como entradas para a função e permitem que ela realize ações com base nesses valores. Os argumentos podem ser de diferentes tipos, dependendo da função, e são usados para personalizar o comportamento da função.

3. Existem vários tipos de funções, incluindo funções predefinidas (também chamadas de funções integradas), funções definidas pelo usuário e funções anônimas. Funções predefinidas são fornecidas pela linguagem de programação, como funções matemáticas. Funções definidas pelo usuário são criadas pelo programador para atender a necessidades específicas. Funções anônimas são funções sem nome que podem ser usadas em situações específicas.

4. "void" é um tipo de dado usado em linguagens de programação, como C e C++, para indicar que uma função não retorna um valor. Em outras palavras, quando uma função tem o tipo de retorno "void", ela realiza uma tarefa, mas não produz um resultado que possa ser usado posteriormente.

5. No C e C++, o padrão de passagem de parâmetro é chamado de "passagem por valor". Isso significa que, ao chamar uma função, uma cópia do valor do argumento é passada para a função. Qualquer modificação feita dentro da função não afetará a variável original fora dela. No entanto, é possível passar um ponteiro para permitir que a função modifique o valor original.

6. As funções podem ter vários tipos de retorno, dependendo da linguagem de programação. Alguns dos tipos de retorno comuns incluem:
    Tipos primitivos: como inteiros, pontos flutuantes, caracteres, etc.
    Estruturas de dados: como arrays, listas, ou até mesmo objetos personalizados em linguagens orientadas a objetos.
    "void": Quando uma função não retorna um valor.
    Ponteiros: Uma função pode retornar um ponteiro para um objeto ou recurso.
    Tipos personalizados: Em algumas linguagens, você pode definir tipos de retorno personalizados, o que é útil para organizar dados complexos.

7. #include <iostream>
#include <cmath>
using namespace std;

double calcularAreaCirculo(double raio){
    return M_PI * pow(raio, 2);
}

int main(){
    double raio;

    cout << "digite o raio do circulo: " << endl;
    cin >> raio;

    double area = calcularAreaCirculo(raio);

    cout << "a area do circulo e: " << area << endl;

    return 0;
}

8. #include <iostream>
using namespace std;

bool verificarAnoBissexto(int ano){
    if ((ano%4==0 && ano%100!=0) || (ano%400==0)){
        return true;
    } else {
        return false;
    }
}

int main(){
    int ano;

    cout << "digite um ano: " << endl;
    cin >> ano;

    if (verificarAnoBissexto(ano)){
        cout << ano << " e um ano bissexto." << endl;
    } else {
        cout << ano << " nao e um ano bissexto." << endl;
    }

    return 0;
}

9. #include <iostream>
using namespace std;

double conversao(double celsius){
    return celsius*9.0/5.0+32.0;
}

int main(){
    double celsius;

    cout << "digite a temperatura em graus celsius: " << endl;
    cin >> celsius;

    double fahrenheit = conversao(celsius);
    cout << "a temperatura em fahrenheit e: " << fahrenheit << endl;

    return 0;
}
