selection
I. Para v1 = {7, 2, 5, 4, 9}:
  Iteração 1: menor = 1, troca 7 e 2 → {2, 7, 5, 4, 9}
  Iteração 2: menor = 2, troca 7 e 5 → {2, 5, 7, 4, 9}
  Iteração 3: menor = 3, troca 7 e 4 → {2, 5, 4, 7, 9}
  Iteração 4: menor = 4, troca 7 e 9 (não troca, pois são iguais)
  Resultado: {2, 5, 4, 7, 9}
  
  Para v2 = {7, 5, 5, 3, 9}:
  Iteração 1: menor = 3, troca 7 e 3 → {3, 5, 5, 7, 9}
  Resultado: {3, 5, 5, 7, 9}
  
  Para v3 = {1, 2, 3, 4}:
  Iteração 1: menor = 0, troca 1 e 1 (não troca, pois são iguais)
  Resultado: {1, 2, 3, 4}
  
  Para v4 = {4, 3, 2, 1}:
  Iteração 1: menor = 3, troca 4 e 1 → {1, 3, 2, 4}
  Iteração 2: menor = 2, troca 3 e 2 → {1, 2, 3, 4}
  Resultado: {1, 2, 3, 4}

II. Se trocarmos a condição i < n-1 da linha 4 por i < n, a função pode tentar acessar uma posição fora do vetor na última iteração, resultando em comportamento indefinido e possível erro de acesso de memória.

III. Ao ordenar v2, se há elementos iguais, a função de seleção não garante a manutenção da ordem relativa dos elementos iguais. A ordem entre elementos iguais pode variar.

IV. Para v3, não há trocas, pois o vetor já está ordenado. Para v4, são realizadas 6 trocas.

V. void troca(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

void selection_decrescente(int *v, int n){
    int i, j, maior;
    
    for (i = 0; i < n-1; i++){
        maior = i;
        
        for (j = i+1; j < n; j++){
            if (v[j] > v[maior]){
                maior = j;
            }
        }
        
        if (v[maior] != v[i]){
            troca(&v[maior], &v[i]);
        }
    }
}

bubble
I. v1 = {7, 2, 5, 4, 9}
  1: {2, 5, 4, 7, 9}
  2: {2, 4, 5, 7, 9}
  3: {2, 4, 5, 7, 9}
  4: {2, 4, 5, 7, 9}

  v2 = {7, 5, 5, 3, 9}
  1: {5, 5, 3, 7, 9}
  2: {5, 3, 5, 7, 9}
  3: {3, 5, 5, 7, 9}
  4: {3, 5, 5, 7, 9}

  v3 = {1, 2, 3, 4}
  1: {1, 2, 3, 4}
  2: {1, 2, 3, 4}
  3: {1, 2, 3, 4}
  4: {1, 2, 3, 4}

  v4 = {4, 3, 2, 1}
  1: {3, 2, 1, 4}
  2: {2, 1, 3, 4}
  3: {1, 2, 3, 4}
  4: {1, 2, 3, 4}

II. 1: {5, 5, 3, 7, 9} (3 comparações, 1 troca)
  2: {5, 3, 5, 7, 9} (3 comparações, 1 troca)
  3: {3, 5, 5, 7, 9} (3 comparações, 1 troca)
  4: {3, 5, 5, 7, 9} (3 comparações, 0 troca)
  Portanto, para a ordenação de v2, foram realizadas 12 comparações e 3 trocas.

III. Comparação:
  Ordenação por Seleção: Sempre realiza o mesmo número de comparações, independentemente da disposição dos dados.
  Ordenação por Flutuação (Bubble Sort): O número de comparações depende da disposição dos dados. Pode realizar menos comparações se a lista já estiver parcialmente ordenada.

  Trocas:
  Ordenação por Seleção: Sempre realiza o mesmo número de trocas, independentemente da disposição dos dados.
  Ordenação por Flutuação (Bubble Sort): Pode realizar mais trocas, especialmente se a lista estiver inversamente ordenada.

IV. #include <iostream>
using namespace std;

void bubbleSortRecursive(int arr[], int n){
    if (n == 1)
        return;

    for (int i = 0; i < n - 1; i++){
        if (arr[i] > arr[i + 1]){
            swap(arr[i], arr[i + 1]);
        }
    }

    bubbleSortRecursive(arr, n - 1);
}

int main(){
    int arr[] = {7, 2, 5, 4, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Vetor original: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }

    bubbleSortRecursive(arr, n);

    cout << "\nVetor ordenado: ";
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }

    return 0;
}
